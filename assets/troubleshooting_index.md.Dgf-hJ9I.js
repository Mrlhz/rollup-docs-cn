import{_ as r,b as p,e as i,x as h,aw as o,l as t,k as e,M as l,r as d,o as k}from"./chunks/framework.BunOihQj.js";const V=JSON.parse('{"title":"故障排除","description":"","frontmatter":{"title":"故障排除"},"headers":[],"relativePath":"troubleshooting/index.md","filePath":"troubleshooting/index.md"}'),u={name:"troubleshooting/index.md"},g={class:"language-js vp-adaptive-theme"},E={class:"shiki shiki-themes github-light github-dark vp-code twoslash lsp",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"},tabindex:"0"},y={class:"line"},m={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},f={class:"line"},c={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},v={class:"line"},b={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},F={class:"line"},w={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},C={class:"language-js vp-adaptive-theme"},q={class:"shiki shiki-themes github-light github-dark vp-code twoslash lsp",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"},tabindex:"0"},x={class:"line"},S={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},A={class:"line"},T={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},D={class:"line"},j={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}};function _(n,s,R,B,P,N){const a=d("v-menu");return k(),p("div",null,[i("h1",null,h(n.$frontmatter.title),1),s[52]||(s[52]=o(`<nav class="table-of-contents"><ul><li><a href="#avoiding-eval">避免使用 eval</a><ul><li><a href="#eval2-eval">eval2 = eval</a></li><li><a href="#new-function">new Function</a></li></ul></li><li><a href="#tree-shaking-does-not-seem-to-be-working">除屑优化（Tree-Shaking）似乎不能正常工作</a></li><li><a href="#error-name-is-not-exported-by-module">Error: &quot;[name] is not exported by [module]&quot;</a></li><li><a href="#error-this-is-undefined">Error: &quot;this is undefined&quot;</a></li><li><a href="#warning-sourcemap-is-likely-to-be-incorrect">Warning: &quot;Sourcemap is likely to be incorrect&quot;</a></li><li><a href="#warning-treating-module-as-external-dependency">Warning: &quot;Treating [module] as external dependency&quot;</a></li><li><a href="#error-emfile-too-many-open-files">Error: &quot;EMFILE: too many open files&quot;</a></li><li><a href="#error:-javascript-heap-out-of-memory">Error: JavaScript heap out of memory</a></li><li><a href="#error-node-tried-to-load-your-configuration-file-as-commonjs-even-though-it-is-likely-an-es-module">Error: Node tried to load your configuration file as CommonJS even though it is likely an ES module</a></li></ul></nav><p>如果你遇到困难，请尝试在 <a href="https://is.gd/rollup_chat" target="_blank" rel="noreferrer">Rollup Discord</a> 上讨论该问题或将问题发布到 <a href="https://stackoverflow.com/questions/tagged/rollupjs" target="_blank" rel="noreferrer">Stackoverflow</a>. 如果你发现了 bug，或者 Rollup 不能满足你的需求，可以尝试提 <a href="https://github.com/rollup/rollup/issues" target="_blank" rel="noreferrer">issue</a>。最后，你可以尝试在 Twitter 上联系 <a href="https://twitter.com/RollupJS" target="_blank" rel="noreferrer">@RollupJS</a> 。</p><h2 id="avoiding-eval" tabindex="-1">避免使用 <code>eval</code> <a class="header-anchor" href="#avoiding-eval" aria-label="Permalink to &quot;避免使用 \`eval\` {#avoiding-eval}&quot;">​</a></h2><p>你可能已经了解到在某些人看来“<code>eval</code> 是邪恶的”。但它对 Rollup 尤其有害，因为它的工作方式——不像其他将每个模块包装在函数中的模块打包器，Rollup 将所有代码放在同一个作用域内。</p><p>虽然这样效率更高，但这意味着在你使用 eval 时共享作用域将被“污染”，而使用其他打包器时，未使用 eval 的模块不会被污染。压缩工具不能破坏污染代码中的变量名，因为它不能保证要评估的代码不引用这些变量名。</p><p>此外，<strong>它还会带来安全风险</strong>，因为恶意模块可能通过 <code>eval(&#39;SUPER_SEKRIT&#39;)</code> 访问另一个模块的私有变量。</p><p>幸运的是，除非你真的希望被执行的代码能够访问局部变量（这种情况下，你应该是错了什么！），否则可以通过以下两种方式实现相同的效果：</p><h3 id="eval2-eval" tabindex="-1">eval2 = eval <a class="header-anchor" href="#eval2-eval" aria-label="Permalink to &quot;eval2 = eval {#eval2-eval}&quot;">​</a></h3><p>简单地“复制” <code>eval</code>，你的确可以得到一个可以完成相同事情的函数，但是它运行在全局作用域而不是局部作用域：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eval2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eval;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;console.log(&quot;with eval:&quot;,foo)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &#39;with eval: 42&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	eval2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;console.log(&quot;with eval2:&quot;,foo)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 ReferenceError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><h3 id="new-function" tabindex="-1"><code>new Function</code> <a class="header-anchor" href="#new-function" aria-label="Permalink to &quot;\`new Function\` {#new-function}&quot;">​</a></h3><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">Function 构造函数</a> 可以根据提供的字符串生成一个函数。同样，它运行在全局作用域中。如果需要重复调用函数，这要比使用<code>eval</code>快得多得多。</p><h2 id="tree-shaking-does-not-seem-to-be-working" tabindex="-1">除屑优化（Tree-Shaking）似乎不能正常工作 <a class="header-anchor" href="#tree-shaking-does-not-seem-to-be-working" aria-label="Permalink to &quot;除屑优化（Tree-Shaking）似乎不能正常工作 {#tree-shaking-does-not-seem-to-be-working}&quot;">​</a></h2><p>有时，你会在打包文件中发现一些看起来不应该存在的代码。例如，如果你从 <code>lodash-es</code> 导入一个实用函数，你可能希望得到该实用函数工作所需的最低限度的代码。</p><p>但是 Rollup 必须对它删除的代码保持保守，以确保最终结果将正确运行。如果导入的模块有副作用，无论是对你正在使用的模块中的某些部分还是对全局环境，Rollup 都会平安无事地处理这些副作用。</p><p>因为在像 JavaScript 这样的动态语言中进行静态分析是困难的，所以偶尔会有误报。Lodash 就是一个很好的例子，它看起来有很多副作用，即使在没有副作用的地方。你通常可以通过导入子模块（例如：<code>import map from &#39;lodash-es/map&#39;</code> 而不是 <code>import {map} from &#39;lodash-es&#39;</code>）。</p><p>Rollup 的静态分析将随着时间的推移而改进，但它永远不会在所有情况下都是完美的——这就是 JavaScript。</p><h2 id="error-name-is-not-exported-by-module" tabindex="-1">Error: &quot;[name] is not exported by [module]&quot; <a class="header-anchor" href="#error-name-is-not-exported-by-module" aria-label="Permalink to &quot;Error: &quot;[name] is not exported by [module]&quot; {#error-name-is-not-exported-by-module}&quot;">​</a></h2><p>偶尔你会看见这样一条错误信息：</p><blockquote><p>&#39;foo&#39; is not exported by bar.js (imported by baz.js)</p></blockquote><p>导入声明必须在被导入的模块中有相应的导出声明。例如，如果你在一个模块中有 <code>import a from &#39;./a.js&#39;</code>，而 a.js 没有 <code>export default</code> 声明，或者 <code>import {foo} from &#39;./b.js&#39;</code>，而 b.js 没有导出 <code>foo</code>，那么 Rollup 就不能打包这些代码。</p><p>此错误经常发生在由 <a href="https://github.com/rollup/rollup-plugin-commonjs" target="_blank" rel="noreferrer">rollup-plugin-commonjs</a> 转换的 CommonJS 模块中，此包已被弃用，且不再维护，请使用 <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs#custom-named-exports" target="_blank" rel="noreferrer">@rollup/plugin-commonjs</a>。</p><h2 id="error-this-is-undefined" tabindex="-1">Error: &quot;this is undefined&quot; <a class="header-anchor" href="#error-this-is-undefined" aria-label="Permalink to &quot;Error: &quot;this is undefined&quot; {#error-this-is-undefined}&quot;">​</a></h2><p>在 JavaScript 模块中，<code>this</code> 在顶层（即函数外部）是 <code>undefined</code>。因此，Rollup 将重写任何对 <code>undefined</code> 的 <code>this</code> 引用，以便产生的行为与原生支持模块时发生的行为相匹配。</p><p>偶尔也有正当的理由让 <code>this</code> 有别的意思。如果你在你的包中遇到错误，你可以使用 <code>options.context</code> 和 <code>options.moduleContext</code> 来改变这种行为。</p><h2 id="warning-sourcemap-is-likely-to-be-incorrect" tabindex="-1">Warning: &quot;Sourcemap is likely to be incorrect&quot; <a class="header-anchor" href="#warning-sourcemap-is-likely-to-be-incorrect" aria-label="Permalink to &quot;Warning: &quot;Sourcemap is likely to be incorrect&quot; {#warning-sourcemap-is-likely-to-be-incorrect}&quot;">​</a></h2><p>如果你为你的包（<code>sourcemap: true</code> 或 <code>sourcemap: &#39;inline&#39;</code>）生成了一个 sourcemap，但你使用了一个或多个转换代码的插件，而没有生成转换所需的 sourcemap，你会看到这个警告。</p><p>通常，只有当插件（而不是打包器）配置了 <code>sourcemap: false</code> 时，插件才会省略 sourcemap——所以你所需要做的就是更改它。如果插件没有生成 sourcemap，请考虑向插件作者提出问题。</p><h2 id="warning-treating-module-as-external-dependency" tabindex="-1">Warning: &quot;Treating [module] as external dependency&quot; <a class="header-anchor" href="#warning-treating-module-as-external-dependency" aria-label="Permalink to &quot;Warning: &quot;Treating [module] as external dependency&quot; {#warning-treating-module-as-external-dependency}&quot;">​</a></h2><p>默认情况下，Rollup 只解析相对模块。这意味着像这样的 import 语句</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;moment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>不会导致 <code>moment</code> 被打包到你的包中——相反，它将是运行时需要的外部依赖项。如果这就是你想要的，你可以用 <code>external</code> 选项消除这个警告，这会让你的意图更加明确:</p>`,32)),i("div",g,[s[31]||(s[31]=i("button",{title:"Copy Code",class:"copy"},null,-1)),s[32]||(s[32]=i("span",{class:"lang"},"js",-1)),i("pre",E,[i("code",null,[s[25]||(s[25]=o(`<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
`,4)),i("span",y,[s[2]||(s[2]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	",-1)),i("span",m,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[0]||(s[0]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"entry"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": string")])],-1)])),default:e(()=>[s[1]||(s[1]=i("span",null,"entry",-1))]),_:1})]),s[3]||(s[3]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": ",-1)),s[4]||(s[4]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'src/index.js'",-1)),s[5]||(s[5]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",",-1))]),s[26]||(s[26]=l(`
`)),i("span",f,[s[8]||(s[8]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	",-1)),i("span",c,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[6]||(s[6]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dest"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": string")])],-1)])),default:e(()=>[s[7]||(s[7]=i("span",null,"dest",-1))]),_:1})]),s[9]||(s[9]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": ",-1)),s[10]||(s[10]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'bundle.js'",-1)),s[11]||(s[11]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",",-1))]),s[27]||(s[27]=l(`
`)),i("span",v,[s[14]||(s[14]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	",-1)),i("span",b,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[12]||(s[12]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"format"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": string")])],-1)])),default:e(()=>[s[13]||(s[13]=i("span",null,"format",-1))]),_:1})]),s[15]||(s[15]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": ",-1)),s[16]||(s[16]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'cjs'",-1)),s[17]||(s[17]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",",-1))]),s[28]||(s[28]=l(`
`)),i("span",F,[s[20]||(s[20]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	",-1)),i("span",w,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[18]||(s[18]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"InputOptions.external"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExternalOption "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")])],-1)])),default:e(()=>[s[19]||(s[19]=i("span",null,"external",-1))]),_:1})]),s[21]||(s[21]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": [",-1)),s[22]||(s[22]=i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'moment'",-1)),s[23]||(s[23]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"] ",-1)),s[24]||(s[24]=i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// <-- 消除这个警告",-1))]),s[29]||(s[29]=l(`
`)),s[30]||(s[30]=i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")],-1))])])]),s[53]||(s[53]=o('<p>如果你确实想在打包后的代码中包含这个模块，需要告诉 Rollup 如何找到它。大多数情况下，你可以使用 <a href="https://github.com/rollup/plugins/tree/master/packages/node-resolve" target="_blank" rel="noreferrer">@rollup/plugin-node-resolve</a></p><p>有些模块，如 <code>events</code> 或 <code>util</code>，是内置在 Node.js 中的。如果你想要包含它们（例如，让你的包在浏览器中运行），你可能需要使用 <a href="https://github.com/FredKSchott/rollup-plugin-polyfill-node" target="_blank" rel="noreferrer">rollup-plugin-polyfill-node</a></p><h2 id="error-emfile-too-many-open-files" tabindex="-1">Error: &quot;EMFILE: too many open files&quot; <a class="header-anchor" href="#error-emfile-too-many-open-files" aria-label="Permalink to &quot;Error: &quot;EMFILE: too many open files&quot; {#error-emfile-too-many-open-files}&quot;">​</a></h2><p>对于大型项目，在 macOS 上以监视模式运行 Rollup 时可能会遇到 EMFILE 错误。如果你遇到这种情况，禁用 FSEvents 可能会消除问题：</p>',4)),i("div",C,[s[50]||(s[50]=i("button",{title:"Copy Code",class:"copy"},null,-1)),s[51]||(s[51]=i("span",{class:"lang"},"js",-1)),i("pre",q,[i("code",null,[s[46]||(s[46]=o(`<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* ..., */</span></span>
`,6)),i("span",x,[s[35]||(s[35]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	",-1)),i("span",S,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[33]||(s[33]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"InputOptions.watch"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," |"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," WatcherOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")])],-1)])),default:e(()=>[s[34]||(s[34]=i("span",null,"watch",-1))]),_:1})]),s[36]||(s[36]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[47]||(s[47]=l(`
`)),i("span",A,[s[39]||(s[39]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"		",-1)),i("span",T,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[37]||(s[37]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"WatcherOptions.chokidar"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ChokidarOptions "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")])],-1)])),default:e(()=>[s[38]||(s[38]=i("span",null,"chokidar",-1))]),_:1})]),s[40]||(s[40]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": {",-1))]),s[48]||(s[48]=l(`
`)),i("span",D,[s[43]||(s[43]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"			",-1)),i("span",j,[t(a,{class:"twoslash-hover","popper-class":"shiki twoslash-floating vp-copy-ignore vp-code",theme:"twoslash"},{popper:e(({})=>s[41]||(s[41]=[i("span",{class:"twoslash-popup-container vp-copy-ignore"},[i("code",{class:"twoslash-popup-code"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"ChokidarOptions.useFsEvents"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"?:"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," boolean "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"|"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," undefined")])],-1)])),default:e(()=>[s[42]||(s[42]=i("span",null,"useFsEvents",-1))]),_:1})]),s[44]||(s[44]=i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": ",-1)),s[45]||(s[45]=i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"false",-1))]),s[49]||(s[49]=o(`
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>`,6))])])]),s[54]||(s[54]=o('<h2 id="error:-javascript-heap-out-of-memory" tabindex="-1">Error: JavaScript heap out of memory <a class="header-anchor" href="#error:-javascript-heap-out-of-memory" aria-label="Permalink to &quot;Error: JavaScript heap out of memory {#error:-javascript-heap-out-of-memory}&quot;">​</a></h2><p>由于 Rollup 需要同时将所有模块信息保存在内存中，以便分析除屑优化（Tree-Shaking）的相关副作用，因此打包大型项目可能会达到 Node 的内存限制。如果发生这种情况，你可以通过这种方式运行 Rollup 以提高这个限制</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-old-space-size=8192</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_modules/rollup/dist/bin/rollup</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span></span></code></pre></div><p>按需增加 <code>--max-old-space-size</code> 。请注意，这个数字可以安全地超过你的可用物理内存。在这种情况下，Node 会根据需要将内存分页到磁盘上。</p><p>你可以通过使用动态导入引入代码分割、只导入特定的模块而不是整个依赖、禁用 sourcemap，或者增加交换空间的大小来减少内存压力。</p><h2 id="error-node-tried-to-load-your-configuration-file-as-commonjs-even-though-it-is-likely-an-es-module" tabindex="-1">Error: Node tried to load your configuration file as CommonJS even though it is likely an ES module <a class="header-anchor" href="#error-node-tried-to-load-your-configuration-file-as-commonjs-even-though-it-is-likely-an-es-module" aria-label="Permalink to &quot;Error: Node tried to load your configuration file as CommonJS even though it is likely an ES module {#error-node-tried-to-load-your-configuration-file-as-commonjs-even-though-it-is-likely-an-es-module}&quot;">​</a></h2><p>默认情况下，Rollup 会使用 Node 原生的模块机制来加载你的 Rollup 配置。这意味着如果你在配置中使用 ES imports 和 exports，你要么需要在 <code>package. js</code> 中定义 <code>&quot;type&quot;: &quot;module&quot;</code>，或者为你的配置文件使用 <code>.mjs</code> 后缀。更多信息请参见 <a href="./../command-line-interface/#configuration-files">配置文件</a> 和 <a href="./../command-line-interface/#caveats-when-using-native-node-es-modules">使用原生 Node ES 模块时的注意事项</a>。</p>',7))])}const J=r(u,[["render",_]]);export{V as __pageData,J as default};
